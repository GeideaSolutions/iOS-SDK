// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 effective-4.1.50 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name GeideaPaymentSDK
import Foundation
@_exported import GeideaPaymentSDK
import PassKit
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
public struct PaymentMehodParams : Swift.Codable {
  public var month: Swift.Int
  public var year: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Swift.String {
  public var asURL: Foundation.URL? {
    get
  }
}
@objc public class GDApplePayDetails : ObjectiveC.NSObject {
  @objc public init(in hostViewController: UIKit.UIViewController? = nil, andButtonIn buttonView: UIKit.UIView? = nil, forMerchantIdentifier merchantIdentifier: Swift.String, andMerchantDisplayName merchantDisplayName: Swift.String? = nil, withCallbackUrl callBackUrl: Swift.String?, andReferenceId merchantRefId: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class GDAddress : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public init(withCountryCode countryCode: Swift.String?, andCity city: Swift.String?, andStreet street: Swift.String?, andPostCode postCode: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDOrdersResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var orders: [GeideaPaymentSDK.GDOrderResponse]?
  @objc public var totalCount: Swift.Int
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDOrderResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var merchantReferenceId: Swift.String?
  @objc public var orderId: Swift.String?
  @objc public var threeDSecureId: Swift.String?
  @objc public var status: Swift.String?
  @objc public var eInvoiceId: Swift.String?
  @objc public var amount: Swift.Double
  @objc public var totalRefundedAmount: Swift.Double
  @objc public var merchantPublicKey: Swift.String?
  @objc public var currency: Swift.String?
  @objc public var updatedDate: Swift.String?
  @objc public var totalAuthorizedAmount: Swift.Double
  @objc public var customerEmail: Swift.String?
  @objc public var totalCapturedAmount: Swift.Double
  @objc public var createdBy: Swift.String?
  @objc public var transactions: [GeideaPaymentSDK.GDTransactionResponse]?
  @objc public var createdDate: Swift.String?
  @objc public var merchantId: Swift.String?
  @objc public var updatedBy: Swift.String?
  @objc public var shippingAddress: GeideaPaymentSDK.GDAddress?
  @objc public var billingAddress: GeideaPaymentSDK.GDAddress?
  @objc public var paymentMethod: GeideaPaymentSDK.GDPaymentMethodResponse?
  @objc public var returnUrl: Swift.String?
  @objc public var detailedStatus: Swift.String?
  @objc public var callbackUrl: Swift.String?
  @objc public var cardOnFile: Swift.Bool
  @objc public var tokenId: Swift.String?
  @objc public var initiatedBy: Swift.String?
  @objc public var agreementId: Swift.String?
  @objc public var agreementType: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GDConfigApplePay : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct ExpiryDateParams : Swift.Codable {
  public var month: Swift.Int
  public var year: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class GeideaPaymentAPI : ObjectiveC.NSObject {
  @objc public static func isCredentialsAvailable() -> Swift.Bool
  @objc public static func setCredentials(withMerchantKey merchantKey: Swift.String, andPassword password: Swift.String)
  @objc public static func pay(theAmount amount: GeideaPaymentSDK.GDAmount, withCardDetails cardDetails: GeideaPaymentSDK.GDCardDetails, andTokenizationDetails tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails?, andEInvoice eInvoiceId: Swift.String?, andCustomerDetails customerDetails: GeideaPaymentSDK.GDCustomerDetails?, orderId: Swift.String? = nil, dismissAction: ((GeideaPaymentSDK.GDCancelResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)? = nil, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func payWithGeideaForm(theAmount amount: GeideaPaymentSDK.GDAmount, showAddress: Swift.Bool, showEmail: Swift.Bool, tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails?, customerDetails: GeideaPaymentSDK.GDCustomerDetails?, applePayDetails: GeideaPaymentSDK.GDApplePayDetails? = nil, config: GeideaPaymentSDK.GDConfigResponse?, eInvoiceId: Swift.String?, viewController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?, GeideaPaymentSDK.GDApplePayResponse?) -> Swift.Void)
  @objc public static func payWithToken(theAmount amount: GeideaPaymentSDK.GDAmount, withTokenId token: Swift.String, tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails, andEInvoiceId eInvoiceId: Swift.String?, andCustomerDetails customerDetails: GeideaPaymentSDK.GDCustomerDetails?, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func capture(with orderId: Swift.String, callbackUrl: Swift.String?, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func refund(with orderId: Swift.String, callbackUrl: Swift.String?, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func cancel(with orderId: Swift.String, callbackUrl: Swift.String?, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDCancelResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func setupApplePay(forApplePayDetails applePayDetails: GeideaPaymentSDK.GDApplePayDetails, with amount: GeideaPaymentSDK.GDAmount, config: GeideaPaymentSDK.GDConfigResponse?, completion: @escaping (GeideaPaymentSDK.GDApplePayResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getCardSchemeLogo(withCardType cardType: GeideaPaymentSDK.CardType) -> UIKit.UIImage?
  @objc public static func getCardSchemeLogo(withCardNumber cardNumber: Swift.String?) -> UIKit.UIImage?
  @objc public static func createInvoice(with eInvoiceParams: GeideaPaymentSDK.GDEInvoiceDetails, completion: @escaping (GeideaPaymentSDK.GDEInvoiceResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func updateInvoice(with eInvoiceParams: GeideaPaymentSDK.GDEInvoiceDetails, completion: @escaping (GeideaPaymentSDK.GDEInvoiceResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getInvoice(with eInvoiceId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDEInvoiceResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func deleteInvoice(with eInvoiceId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDEInvoiceResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getOrders(with orderParams: GeideaPaymentSDK.GDOrdersFilter?, completion: @escaping (GeideaPaymentSDK.GDOrdersResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getOrder(with orderId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getMerchantConfig(completion: @escaping (GeideaPaymentSDK.GDConfigResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func setEnvironment(environment: GeideaPaymentSDK.Environment)
  @objc public static func removeCredentials()
  @objc public static func updateCredentials(withMerchantKey merchantKey: Swift.String, andPassword password: Swift.String)
  @objc public static func startEInvoice(withEInvoiceID eInvoiceId: Swift.String?, viewController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDEInvoiceResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getModelString(order: GeideaPaymentSDK.GDOrderResponse) -> Swift.String?
  @objc public static func getConfigString(config: GeideaPaymentSDK.GDConfigResponse) -> Swift.String?
  @objc public static func getEInvoiceString(order: GeideaPaymentSDK.GDEInvoiceResponse) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDEInvoiceCustomer : ObjectiveC.NSObject, Swift.Codable {
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var name: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct CountryConstants {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPaymentMethodResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.String?
  @objc public var brand: Swift.String?
  @objc public var cardholderName: Swift.String?
  @objc public var maskedCardNumber: Swift.String?
  public var expiryDate: GeideaPaymentSDK.ExpiryDateParams?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Foundation.URL {
  public var queryItems: [Swift.String : Swift.String] {
    get
  }
}
@objc public class GDTokenizationDetails : ObjectiveC.NSObject {
  @objc public init(withCardOnFile isCardOnFile: Swift.Bool = false, initiatedBy: Swift.String? = nil, agreementId: Swift.String? = nil, agreementType: Swift.String? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDConfigResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var hppDefaultTimeout: Swift.Int
  @objc public var countries: [GeideaPaymentSDK.ConfigCountriesResponse]?
  public var is3dsV2Enabled: Swift.Bool?
  public var isTokenizationEnabled: Swift.Bool?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var name: Swift.String?
  @objc public var applePay: GeideaPaymentSDK.GDConfigApplePay?
  @objc public var paymentMethods: [Swift.String]?
  @objc public var currencies: [Swift.String]?
  @objc public var merchantName: Swift.String?
  @objc public var allowedInitiatedByValues: [Swift.String]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDAmount : ObjectiveC.NSObject {
  @objc public init(amount: Swift.Double, currency: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConfigCountriesResponse : ObjectiveC.NSObject, Swift.Codable {
  public var key3: Swift.String?
  public var nameEn: Swift.String?
  public var nameAr: Swift.String?
  public var key2: Swift.String?
  public var isSupported: Swift.Bool
  public var numericCode: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objcMembers public class GDCodesResponse : Swift.Codable {
  @objc public var acquirerCode: Swift.String?
  @objc public var acquirerMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GDCustomerDetails : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(withEmail email: Swift.String?, andCallbackUrl callbackUrl: Swift.String? = nil, merchantReferenceId: Swift.String? = nil, shippingAddress: GeideaPaymentSDK.GDAddress? = nil, billingAddress: GeideaPaymentSDK.GDAddress? = nil, paymentOperation: GeideaPaymentSDK.PaymentOperation = .NONE)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PayResponse : ObjectiveC.NSObject, Swift.Codable {
  public var responseCode: Swift.String?
  public var responseMessage: Swift.String?
  public var detailedResponseMessage: Swift.String?
  public var detailedResponseCode: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Foundation.JSONSerialization {
  open class func decimalData(withJSONObject obj: Any, options opt: Foundation.JSONSerialization.WritingOptions = []) throws -> Foundation.Data
  open class func writeDecimalJSONObject(_ obj: Any, to stream: Foundation.OutputStream, options opt: Foundation.JSONSerialization.WritingOptions = [], error: Foundation.NSErrorPointer) -> Swift.Int
}
@objc public class GDCardDetails : ObjectiveC.NSObject {
  @objc public init(withCardholderName cardholderName: Swift.String, andCardNumber cardNumber: Swift.String, andCVV cvv: Swift.String, andExpiryMonth expiryMonth: Swift.Int, andExpiryYear expiryYear: Swift.Int)
  @objc deinit
}
@objc public class GDEInvoiceDetails : ObjectiveC.NSObject {
  @objc public init(withAmount amount: GeideaPaymentSDK.GDAmount, andExpiryDate expiryDate: Foundation.Date? = nil, andName name: Swift.String, andEmail email: Swift.String? = nil, andPhoneNumber phoneNumber: Swift.String? = nil, eInvoiceId: Swift.String? = nil)
  @objc deinit
}
@objc public enum Environment : Swift.Int {
  case dev
  case test
  case preprod
  case prod
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDInvoiceResponse : ObjectiveC.NSObject, Swift.Codable {
  public var amount: Swift.Double?
  @objc public var eInvoiceId: Swift.String?
  @objc public var currency: Swift.String?
  @objc public var customer: GeideaPaymentSDK.GDEInvoiceCustomer?
  @objc public var merchantPublicKey: Swift.String?
  @objc public var expiryDate: Swift.String?
  @objc public var status: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SecureStore {
  public func setValue(_ value: Swift.String, for userAccount: Swift.String) throws
  public func getValue(for userAccount: Swift.String) throws -> Swift.String?
  public func removeValue(for userAccount: Swift.String) throws
  public func removeAllValues() throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDApplePayResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var responseCode: Swift.String
  @objc public var responseMessage: Swift.String
  @objc public var detailedResponseCode: Swift.String
  @objc public var detailedResponseMessage: Swift.String
  @objc public var orderId: Swift.String
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDTransactionResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var authenticationDetails: GeideaPaymentSDK.GDAuthenticationDetailsResponse?
  @objc public var amount: Swift.Double
  @objc public var createdDate: Swift.String?
  @objc public var createdBy: Swift.String?
  @objc public var updatedDate: Swift.String?
  @objc public var updatedBy: Swift.String?
  @objc public var transactionId: Swift.String?
  @objc public var type: Swift.String?
  @objc public var status: Swift.String?
  @objc public var currency: Swift.String?
  @objc public var source: Swift.String?
  @objc public var authorizationCode: Swift.String?
  @objc public var rrn: Swift.String?
  @objc public var paymentMethod: GeideaPaymentSDK.GDPaymentMethodResponse?
  public var codes: GeideaPaymentSDK.GDCodesResponse?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum CardType : Swift.Int {
  case Amex, Visa, MasterCard, Mada
  public var regex: Swift.String {
    get
  }
  public func matchesRegex(regex: Swift.String!, text: Swift.String!) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogLevel : Swift.Int {
  case none = 0
  case error = 1
  case info = 2
  case debug = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PaymentOperation : Swift.Int, Swift.Codable {
  case pay
  case preAuthorize
  case authorizeCapture
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class GDOrdersFilter : ObjectiveC.NSObject, Swift.Codable {
  @objc public var DetailedStatuses: [Swift.String]?
  @objc public var Status: Swift.String?
  @objc public var UpdatedDate: Swift.String?
  @objc public var FromDate: Swift.String?
  @objc public var ToDate: Swift.String?
  @objc public var Skip: Swift.Int
  @objc public var Take: Swift.Int
  @objc public init(withStatus status: Swift.String? = nil, andDetailedStatuses detailedStatuses: [Swift.String]? = nil, andUpdatedDate updatedDate: Swift.String? = nil, from fromDate: Swift.String? = nil, to toDate: Swift.String? = nil, skip: Swift.Int = 0, take: Swift.Int = 20)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDAuthenticationDetailsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var acsEci: Swift.String?
  @objc public var paResStatus: Swift.String?
  @objc public var proofXml: Swift.String?
  @objc public var veResEnrolled: Swift.String?
  @objc public var authenticationToken: Swift.String?
  @objc public var xid: Swift.String?
  @objc public var accountAuthenticationValue: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDCancelResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var orderId: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SecureStoreErrorConstants {
}
public enum SecureStoreError : Swift.Error {
  case string2DataConversionError
  case data2StringConversionError
  case unhandledError(message: Swift.String)
}
extension GeideaPaymentSDK.SecureStoreError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ConfigRouter {
  case getMerchantConfig(merchantKey: Swift.String)
}
public struct SDKErrorConstants {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDErrorResponse : ObjectiveC.NSObject {
  @objc public var errors: [Swift.String : [Swift.String]]
  @objc public var status: Swift.Int
  @objc public var title: Swift.String
  @objc public var traceId: Swift.String
  @objc public var type: Swift.String
  @objc public var responseCode: Swift.String
  @objc public var responseMessage: Swift.String
  @objc public var detailedResponseCode: Swift.String
  @objc public var detailedResponseMessage: Swift.String
  @objc public var orderId: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDEInvoiceResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var eInvoice: GeideaPaymentSDK.GDInvoiceResponse?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension GeideaPaymentSDK.Environment : Swift.Equatable {}
extension GeideaPaymentSDK.Environment : Swift.Hashable {}
extension GeideaPaymentSDK.Environment : Swift.RawRepresentable {}
extension GeideaPaymentSDK.CardType : Swift.Equatable {}
extension GeideaPaymentSDK.CardType : Swift.Hashable {}
extension GeideaPaymentSDK.CardType : Swift.RawRepresentable {}
extension GeideaPaymentSDK.LogLevel : Swift.Equatable {}
extension GeideaPaymentSDK.LogLevel : Swift.Hashable {}
extension GeideaPaymentSDK.LogLevel : Swift.RawRepresentable {}
extension GeideaPaymentSDK.PaymentOperation : Swift.Equatable {}
extension GeideaPaymentSDK.PaymentOperation : Swift.Hashable {}
extension GeideaPaymentSDK.PaymentOperation : Swift.RawRepresentable {}
