// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5 effective-4.1.50 (swiftlang-1300.0.31.1 clang-1300.0.29.1)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 4 -enforce-exclusivity=checked -O -module-name GeideaPaymentSDK
import Foundation
@_exported import GeideaPaymentSDK
import JavaScriptCore
import PassKit
import Security
import Swift
import UIKit
import WebKit
import _Concurrency
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPaymentIntent : ObjectiveC.NSObject, Swift.Codable {
  @objc public var id: Swift.String?
  @objc public var type: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct PaymentMehodParams : Swift.Codable {
  public var month: Swift.Int
  public var year: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class GDPostilionDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var stan: Swift.Int
  @objc public var switchKey: Swift.String?
  @objc public var originalKey: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Swift.String {
  public var asURL: Foundation.URL? {
    get
  }
}
@objc public class GDApplePayDetails : ObjectiveC.NSObject {
  @objc public init(in hostViewController: UIKit.UIViewController? = nil, andButtonIn buttonView: UIKit.UIView? = nil, forMerchantIdentifier merchantIdentifier: Swift.String, andMerchantDisplayName merchantDisplayName: Swift.String? = nil, requiredBillingContactFields: Swift.Set<PassKit.PKContactField>? = nil, requiredShippingContactFields: Swift.Set<PassKit.PKContactField>? = nil, paymentMethods: [Swift.String]?, withCallbackUrl callBackUrl: Swift.String?, andReferenceId merchantRefId: Swift.String?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class GDAddress : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc public init(withCountryCode countryCode: Swift.String?, andCity city: Swift.String?, andStreet street: Swift.String?, andPostCode postCode: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDOrdersResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var orders: [GeideaPaymentSDK.GDOrderResponse]?
  @objc public var totalCount: Swift.Int
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDOrderResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var createdDate: Swift.String?
  @objc public var createdBy: Swift.String?
  @objc public var updatedDate: Swift.String?
  @objc public var updatedBy: Swift.String?
  @objc public var orderId: Swift.String?
  @objc public var amount: Swift.Double
  @objc public var currency: Swift.String?
  @objc public var language: Swift.String?
  @objc public var detailedStatus: Swift.String?
  @objc public var status: Swift.String?
  @objc public var threeDSecureId: Swift.String?
  @objc public var merchantId: Swift.String?
  @objc public var merchantPublicKey: Swift.String?
  @objc public var merchantName: Swift.String?
  @objc public var parentOrderId: Swift.String?
  @objc public var merchantReferenceId: Swift.String?
  @objc public var callbackUrl: Swift.String?
  @objc public var customerEmail: Swift.String?
  @objc public var billingAddress: GeideaPaymentSDK.GDAddress?
  @objc public var shippingAddress: GeideaPaymentSDK.GDAddress?
  @objc public var returnUrl: Swift.String?
  @objc public var cardOnFile: Swift.Bool
  @objc public var tokenId: Swift.String?
  @objc public var initiatedBy: Swift.String?
  @objc public var agreementId: Swift.String?
  @objc public var agreementType: Swift.String?
  @objc public var paymentOperation: Swift.String?
  @objc public var custom: Swift.String?
  @objc public var paymentMethod: GeideaPaymentSDK.GDPaymentMethodResponse?
  @objc public var totalAuthorizedAmount: Swift.Double
  @objc public var totalCapturedAmount: Swift.Double
  @objc public var totalRefundedAmount: Swift.Double
  @objc public var paymentIntent: GeideaPaymentSDK.GDPaymentIntent?
  @objc public var isTokenPayment: Swift.Bool
  @objc public var restrictPaymentMethods: Swift.Bool
  @objc public var platform: GeideaPaymentSDK.GDPlatform?
  @objc public var transactions: [GeideaPaymentSDK.GDTransactionResponse]?
  @objc public var statementDescriptor: GeideaPaymentSDK.GDStatementDescriptor?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDSDKMerchantConfigResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var merchantId: Swift.String?
  @objc public var storeId: Swift.String?
  @objc public var data: GeideaPaymentSDK.GDMerchantDataResponse?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GDConfigApplePay : ObjectiveC.NSObject, Swift.Codable {
  public var paymentProcessingCertificateExpiryDate: Swift.String?
  public var isApplePayMobileCertificateAvailable: Swift.Bool?
  public var isApplePayWebEnabled: Swift.Bool?
  public var isApplePayMobileEnabled: Swift.Bool?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPaymentIntentOrder : ObjectiveC.NSObject, Swift.Codable {
  @objc public var paymentIntentId: Swift.String?
  @objc public var createdDate: Swift.String?
  @objc public var orderId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct ExpiryDateParams : Swift.Codable {
  public var month: Swift.Int
  public var year: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class GeideaPaymentAPI : ObjectiveC.NSObject {
  @objc public static func isCredentialsAvailable() -> Swift.Bool
  @objc public static func setCredentials(withMerchantKey merchantKey: Swift.String, andPassword password: Swift.String)
  @objc public static func pay(theAmount amount: GeideaPaymentSDK.GDAmount, withCardDetails cardDetails: GeideaPaymentSDK.GDCardDetails, and3DV2Enabled threeDSV2Enabled: Swift.Bool = false, andTokenizationDetails tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails?, andPaymentIntentId paymentIntentId: Swift.String? = nil, andCustomerDetails customerDetails: GeideaPaymentSDK.GDCustomerDetails?, orderId: Swift.String? = nil, paymentMethods: [Swift.String]? = nil, isFromHPP: Swift.Bool = false, dismissAction: ((GeideaPaymentSDK.GDCancelResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)? = nil, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func initiateAuthenticate(theAmount amount: GeideaPaymentSDK.GDAmount, withCardNumber cardNumber: Swift.String?, andTokenizationDetails tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails?, andPaymentIntentId paymentIntentId: Swift.String? = nil, andCustomerDetails customerDetails: GeideaPaymentSDK.GDCustomerDetails?, orderId: Swift.String? = nil, paymentMethods: [Swift.String]? = nil, dismissAction: ((GeideaPaymentSDK.GDCancelResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)? = nil, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDInitiateAuthenticateResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func payWithGeideaForm(theAmount amount: GeideaPaymentSDK.GDAmount, showAddress: Swift.Bool, showEmail: Swift.Bool, showReceipt: Swift.Bool, tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails? = nil, customerDetails: GeideaPaymentSDK.GDCustomerDetails?, applePayDetails: GeideaPaymentSDK.GDApplePayDetails? = nil, config: GeideaPaymentSDK.GDConfigResponse?, paymentIntentId: Swift.String? = nil, qrDetails: GeideaPaymentSDK.GDQRDetails? = nil, paymentMethods: [Swift.String]? = nil, viewController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func payQRWithGeideaForm(theAmount amount: GeideaPaymentSDK.GDAmount, qrDetails: GeideaPaymentSDK.GDQRDetails, showReceipt: Swift.Bool, viewController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func payQR(theAmount amount: GeideaPaymentSDK.GDAmount, qrDetails: GeideaPaymentSDK.GDQRDetails?, showReceipt: Swift.Bool, merchantName: Swift.String?, viewController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func payWithToken(theAmount amount: GeideaPaymentSDK.GDAmount, withTokenId token: Swift.String, tokenizationDetails: GeideaPaymentSDK.GDTokenizationDetails, andPaymentIntentId paymentIntentId: Swift.String? = nil, andCustomerDetails customerDetails: GeideaPaymentSDK.GDCustomerDetails?, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func capture(with orderId: Swift.String, callbackUrl: Swift.String? = nil, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func refund(with orderId: Swift.String, callbackUrl: Swift.String? = nil, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getQRImage(with amount: GeideaPaymentSDK.GDAmount, qrDetails: GeideaPaymentSDK.GDQRDetails, merchantName: Swift.String, completion: @escaping (GeideaPaymentSDK.GDQRResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func requestToPay(withQRCodeMessage message: Swift.String, phoneNumber: Swift.String, completion: @escaping (GeideaPaymentSDK.GDRTPQRResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func checkPaymentIntentStatus(with paymentIntentId: Swift.String, atEverySeconds seconds: Swift.Int, forMinutes minutes: Swift.Int, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void) -> Foundation.Timer
  @objc public static func cancel(with orderId: Swift.String, callbackUrl: Swift.String? = nil, navController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDCancelResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func setupApplePay(forApplePayDetails applePayDetails: GeideaPaymentSDK.GDApplePayDetails, with amount: GeideaPaymentSDK.GDAmount, config: GeideaPaymentSDK.GDConfigResponse?, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getCardSchemeLogo(withCardType cardType: GeideaPaymentSDK.CardType) -> UIKit.UIImage?
  @objc public static func getCardSchemeLogo(withCardNumber cardNumber: Swift.String?) -> UIKit.UIImage?
  @objc public static func createPaymentIntent(with paymentIntentParams: GeideaPaymentSDK.GDPaymentIntentDetails, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func sendLinkBySMS(with paymentIntentId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func sendLinkByEmail(with paymentIntentId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func sendLinkByMultiple(with sendLinkMultipleDetails: GeideaPaymentSDK.GDSendLinkMultipleDetails, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func updatePaymentIntent(with paymentIntentParams: GeideaPaymentSDK.GDPaymentIntentDetails, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getPaymentIntents(with paymentIntentsParams: GeideaPaymentSDK.GDPaymentIntentFilter, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentsResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getPaymentIntent(with paymentIntentId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func deletePaymentIntent(with paymentIntentId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getOrders(with orderParams: GeideaPaymentSDK.GDOrdersFilter?, completion: @escaping (GeideaPaymentSDK.GDOrdersResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getOrder(with orderId: Swift.String, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getMerchantConfig(completion: @escaping (GeideaPaymentSDK.GDConfigResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getMerchantConfig(with productConfig: GeideaPaymentSDK.GDSDKMerchantConfig? = nil, completion: @escaping ([GeideaPaymentSDK.GDSDKMerchantConfigResponse]?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func setEnvironment(environment: GeideaPaymentSDK.Environment)
  @objc public static func setlanguage(language: GeideaPaymentSDK.Language)
  @objc public static func removeCredentials()
  @objc public static func updateCredentials(withMerchantKey merchantKey: Swift.String, andPassword password: Swift.String)
  @objc public static func startPaymentIntent(withPaymentIntentID paymentIntentId: Swift.String?, status: Swift.String?, type: Swift.String, viewController: UIKit.UIViewController, completion: @escaping (GeideaPaymentSDK.GDPaymentIntentResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func payWithApplePay(withPKPayment pkPayment: PassKit.PKPayment, callbackUrl: Swift.String? = nil, merchentRefId: Swift.String? = nil, completion: @escaping (GeideaPaymentSDK.GDOrderResponse?, GeideaPaymentSDK.GDErrorResponse?) -> Swift.Void)
  @objc public static func getModelString(order: GeideaPaymentSDK.GDOrderResponse) -> Swift.String?
  @objc public static func getQRPaymentString(order: GeideaPaymentSDK.GDRTPQRResponse) -> Swift.String?
  @objc public static func getConfigString(config: GeideaPaymentSDK.GDConfigResponse) -> Swift.String?
  @objc public static func getMMSConfig(order: GeideaPaymentSDK.GDPaymentIntentResponse) -> Swift.String?
  @objc public static func getPaymentIntentString(order: GeideaPaymentSDK.GDPaymentIntentResponse) -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPaymentIntentCustomer : ObjectiveC.NSObject, Swift.Codable {
  @objc public var email: Swift.String?
  @objc public var phone: Swift.String?
  @objc public var name: Swift.String?
  @objc public var customerId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDMerchantConfigResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct CountryConstants {
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPaymentMethodResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var type: Swift.String?
  @objc public var brand: Swift.String?
  @objc public var cardholderName: Swift.String?
  @objc public var maskedCardNumber: Swift.String?
  @objc public var wallet: Swift.String?
  public var expiryDate: GeideaPaymentSDK.ExpiryDateParams?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDQRResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var paymentIntentId: Swift.String?
  @objc public var message: Swift.String?
  @objc public var image: Swift.String?
  @objc public var type: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Foundation.URL {
  public var queryItems: [Swift.String : Swift.String] {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDEInvoiceSentLink : ObjectiveC.NSObject, Swift.Codable {
  @objc public var sentDate: Swift.String?
  @objc public var channel: Swift.String?
  @objc public var recipient: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDTokenizationDetails : ObjectiveC.NSObject {
  @objc public init(withCardOnFile isCardOnFile: Swift.Bool = false, initiatedBy: Swift.String? = nil, agreementId: Swift.String? = nil, agreementType: Swift.String? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDConfigResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var hppDefaultTimeout: Swift.Int
  @objc public var countries: [GeideaPaymentSDK.ConfigCountriesResponse]?
  public var is3dsV2Enabled: Swift.Bool?
  public var isTokenizationEnabled: Swift.Bool?
  public var isCallbackEnabled: Swift.Bool?
  public var isPaymentMethodSelectionEnabled: Swift.Bool?
  public var isTransactionReceiptEnabled: Swift.Bool?
  public var isFederationToGsdkEnabled: Swift.Bool?
  public var isMeezaQrEnabled: Swift.Bool?
  public var useMpgsApiV60: Swift.Bool?
  public var merchantPaymentNotification: Swift.Bool?
  public var customerPaymentNotification: Swift.Bool?
  public var merchantNotificationEmail: Swift.Bool?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var language: Swift.String?
  @objc public var merchantName: Swift.String?
  @objc public var merchantNameAr: Swift.String?
  @objc public var merchantLogoUrl: Swift.String?
  @objc public var merchantCountryTwoLetterCode: Swift.String?
  @objc public var name: Swift.String?
  @objc public var applePay: GeideaPaymentSDK.GDConfigApplePay?
  @objc public var paymentMethods: [Swift.String]?
  @objc public var currencies: [Swift.String]?
  @objc public var allowedInitiatedByValues: [Swift.String]?
  @objc public var cardBrandAuthentications: [GeideaPaymentSDK.GDCardBrandAuthentication]?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPlatform : ObjectiveC.NSObject, Swift.Codable {
  @objc public var integrationType: Swift.String?
  @objc public var name: Swift.String?
  @objc public var version: Swift.String?
  @objc public var pluginVersion: Swift.String?
  @objc public var partnerId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class GDPaymentIntentFilter : ObjectiveC.NSObject, Swift.Codable {
  @objc public var fromDate: Swift.String?
  @objc public var toDate: Swift.String?
  @objc public var take: Swift.Int
  @objc public init(from fromDate: Swift.String? = nil, to toDate: Swift.String? = nil, take: Swift.Int = 20)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDAmount : ObjectiveC.NSObject {
  public var amount: Swift.Double
  public var currency: Swift.String
  @objc public init(amount: Swift.Double, currency: Swift.String)
  @objc deinit
}
@objc @objcMembers public class GDEInvoiceItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public var total: Swift.Double
  @objc public var tax: Swift.Double
  @objc public var taxType: Swift.String?
  @objc public var price: Swift.Double
  @objc public var quantity: Swift.Int
  @objc public var itemDiscount: Swift.Double
  @objc public var itemDiscountType: Swift.String?
  @objc public var eInvoiceDescription: Swift.String?
  @objc public var sku: Swift.String?
  @objc public init(total: Swift.Double, tax: Swift.Double, taxType: Swift.String?, price: Swift.Double, quantity: Swift.Int, itemDiscount: Swift.Double, itemDiscountType: Swift.String?, description: Swift.String?, sku: Swift.String?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum PaymentType : Swift.Int {
  case Card, QR
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDInitiateAuthenticateResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers public class ConfigCountriesResponse : ObjectiveC.NSObject, Swift.Codable {
  public var key3: Swift.String?
  public var nameEn: Swift.String?
  public var nameAr: Swift.String?
  public var key2: Swift.String?
  public var isSupported: Swift.Bool
  public var numericCode: Swift.Int?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GDCardBrandAuthentication : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @objcMembers public class GDEInvoiceDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var collectCustomersBillingShippingAddress: Swift.Bool
  @objc public var preAuthorizeAmount: Swift.Bool
  @objc public var subtotal: Swift.Double
  @objc public var grandTotal: Swift.Double
  @objc public var extraCharges: Swift.Double
  @objc public var extraChargesType: Swift.String?
  @objc public var chargeDescription: Swift.String?
  @objc public var paymentIntentReference: Swift.String?
  @objc public var invoiceDiscount: Swift.Double
  @objc public var invoiceDiscountType: Swift.String?
  @objc public var eInvoiceItems: [GeideaPaymentSDK.GDEInvoiceItem]?
  @objc public init(collectCustomersBillingShippingAddress: Swift.Bool, preAuthorizeAmount: Swift.Bool, subTotal: Swift.Double, grandTotal: Swift.Double, extraCharges: Swift.Double, extraChargesType: Swift.String?, chargeDescription: Swift.String?, paymentIntentReference: Swift.String?, invoiceDiscount: Swift.Double, invoiceDiscountType: Swift.String?, eInvoiceItems: [GeideaPaymentSDK.GDEInvoiceItem]?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers @objcMembers public class GDCodesResponse : Swift.Codable {
  @objc public var acquirerCode: Swift.String?
  @objc public var acquirerMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GDCustomerDetails : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public init(withEmail email: Swift.String?, andCallbackUrl callbackUrl: Swift.String? = nil, merchantReferenceId: Swift.String? = nil, shippingAddress: GeideaPaymentSDK.GDAddress? = nil, billingAddress: GeideaPaymentSDK.GDAddress? = nil, paymentOperation: GeideaPaymentSDK.PaymentOperation = .NONE)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class PayResponse : ObjectiveC.NSObject, Swift.Codable {
  public var responseCode: Swift.String?
  public var responseMessage: Swift.String?
  public var detailedResponseMessage: Swift.String?
  public var detailedResponseCode: Swift.String?
  public var language: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension Foundation.JSONSerialization {
  open class func decimalData(withJSONObject obj: Any, options opt: Foundation.JSONSerialization.WritingOptions = []) throws -> Foundation.Data
  open class func writeDecimalJSONObject(_ obj: Any, to stream: Foundation.OutputStream, options opt: Foundation.JSONSerialization.WritingOptions = [], error: Foundation.NSErrorPointer) -> Swift.Int
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDPaymentIntentResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var paymentIntent: GeideaPaymentSDK.GDPaymentIntentDetailsResponse?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var language: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDCardDetails : ObjectiveC.NSObject {
  @objc public init(withCardholderName cardholderName: Swift.String, andCardNumber cardNumber: Swift.String, andCVV cvv: Swift.String, andExpiryMonth expiryMonth: Swift.Int, andExpiryYear expiryYear: Swift.Int)
  @objc deinit
}
@objc public class GDPaymentIntentDetails : ObjectiveC.NSObject {
  @objc public init(withAmount amount: GeideaPaymentSDK.GDAmount, andExpiryDate expiryDate: Foundation.Date? = nil, andActivationDate activationDate: Foundation.Date? = nil, andCustomer customer: GeideaPaymentSDK.GDPICustomer, andEInvoiceDetails eInvoiceDetails: GeideaPaymentSDK.GDEInvoiceDetails? = nil, paymentIntentId: Swift.String? = nil, status: Swift.String? = nil, type: Swift.String? = nil)
  @objc deinit
}
@objc public enum Environment : Swift.Int {
  case dev
  case test
  case preprod
  case prod
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDPaymentIntentDetailsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var customer: GeideaPaymentSDK.GDPaymentIntentCustomer?
  @objc public var link: Swift.String?
  @objc public var merchantId: Swift.String?
  public var amount: Swift.Double?
  @objc public var createdDate: Swift.String?
  @objc public var updatedDate: Swift.String?
  @objc public var type: Swift.String?
  @objc public var expiryDate: Swift.String?
  @objc public var activationDate: Swift.String?
  @objc public var createdBy: Swift.String?
  @objc public var merchantName: Swift.String?
  @objc public var orders: [GeideaPaymentSDK.GDPaymentIntentOrder]?
  @objc public var eInvoiceDetails: GeideaPaymentSDK.GDEInvoiceDetails?
  @objc public var eInvoiceSentLinks: [GeideaPaymentSDK.GDEInvoiceSentLink]?
  @objc public var updatedBy: Swift.String?
  @objc public var paymentIntentId: Swift.String?
  @objc public var currency: Swift.String?
  @objc public var status: Swift.String?
  @objc public var merchantPublicKey: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDPaymentIntentsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var paymentIntents: [GeideaPaymentSDK.GDPaymentIntentDetailsResponse]?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc public var language: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SecureStore {
  public func setValue(_ value: Swift.String, for userAccount: Swift.String) throws
  public func getValue(for userAccount: Swift.String) throws -> Swift.String?
  public func removeValue(for userAccount: Swift.String) throws
  public func removeAllValues() throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDApplePayResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var responseCode: Swift.String
  @objc public var responseMessage: Swift.String
  @objc public var detailedResponseCode: Swift.String
  @objc public var detailedResponseMessage: Swift.String
  @objc public var orderId: Swift.String
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDTransactionResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var authenticationDetails: GeideaPaymentSDK.GDAuthenticationDetailsResponse?
  @objc public var amount: Swift.Double
  @objc public var createdDate: Swift.String?
  @objc public var createdBy: Swift.String?
  @objc public var updatedDate: Swift.String?
  @objc public var updatedBy: Swift.String?
  @objc public var transactionId: Swift.String?
  @objc public var type: Swift.String?
  @objc public var status: Swift.String?
  @objc public var currency: Swift.String?
  @objc public var source: Swift.String?
  @objc public var authorizationCode: Swift.String?
  @objc public var rrn: Swift.String?
  @objc public var paymentMethod: GeideaPaymentSDK.GDPaymentMethodResponse?
  public var codes: GeideaPaymentSDK.GDCodesResponse?
  @objc public var postilionDetails: GeideaPaymentSDK.GDPostilionDetails?
  @objc public var terminalDetails: GeideaPaymentSDK.GDTerminalDetails?
  @objc public var meezaDetails: GeideaPaymentSDK.GDMeezaDetails?
  @objc public var correlationId: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum CardType : Swift.Int {
  case Amex, Visa, MasterCard, Mada, Meeza
  public var regex: Swift.String {
    get
  }
  public func matchesRegex(regex: Swift.String!, text: Swift.String!) -> Swift.Bool
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum LogLevel : Swift.Int {
  case none = 0
  case error = 1
  case info = 2
  case debug = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers public class GDStatementDescriptor : ObjectiveC.NSObject, Swift.Codable {
  @objc public var name: Swift.Int
  @objc public var phone: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDSDKMerchantConfig : ObjectiveC.NSObject, Swift.Codable {
  public var token: Swift.String?
  public var countryHeader: Swift.String?
  public var params: GeideaPaymentSDK.GDProductMConfig?
  @objc public init(withToken token: Swift.String? = nil, andCountryHeader countryHeader: Swift.String? = nil, params: GeideaPaymentSDK.GDProductMConfig?)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum PaymentOperation : Swift.Int, Swift.Codable {
  case pay
  case preAuthorize
  case authorizeCapture
  case NONE
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDMeezaDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var transactionId: Swift.String?
  @objc public var meezaTransactionId: Swift.String?
  @objc public var type: Swift.String?
  @objc public var transactionTimeStamp: Swift.String?
  @objc public var adviceId: Swift.String?
  @objc public var senderId: Swift.String?
  @objc public var senderName: Swift.String?
  @objc public var senderAddress: Swift.String?
  @objc public var receiverId: Swift.String?
  @objc public var receiverName: Swift.String?
  @objc public var receiverAddress: Swift.String?
  @objc public var amount: Swift.Double
  @objc public var currency: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var responseDescription: Swift.String?
  @objc public var interchange: Swift.Double
  @objc public var interchangeAction: Swift.String?
  @objc public var reference1: Swift.String?
  @objc public var reference2: Swift.String?
  @objc public var tips: Swift.Double
  @objc public var convenienceFee: Swift.Double
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDPICustomer : ObjectiveC.NSObject, Swift.Codable {
  public var name: Swift.String?
  public var email: Swift.String?
  public var phoneNumber: Swift.String?
  @objc public init(withName name: Swift.String? = nil, andPhoneNumber phoneNumber: Swift.String? = nil, andEmail email: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum SDKMerchantConfigRouter {
  case getMerchantConfig(params: GeideaPaymentSDK.GDProductMConfig)
}
@objc @objcMembers public class GDOrdersFilter : ObjectiveC.NSObject, Swift.Codable {
  @objc public var DetailedStatuses: [Swift.String]?
  @objc public var Status: Swift.String?
  @objc public var UpdatedDate: Swift.String?
  @objc public var FromDate: Swift.String?
  @objc public var ToDate: Swift.String?
  @objc public var Skip: Swift.Int
  @objc public var Take: Swift.Int
  @objc public init(withStatus status: Swift.String? = nil, andDetailedStatuses detailedStatuses: [Swift.String]? = nil, andUpdatedDate updatedDate: Swift.String? = nil, from fromDate: Swift.String? = nil, to toDate: Swift.String? = nil, skip: Swift.Int = 0, take: Swift.Int = 20)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct PhoneConstants {
}
@objc public class GDSendLinkMultipleDetails : ObjectiveC.NSObject, Swift.Codable {
  public var paymentIntentIds: [Swift.String]?
  public var sendingChannels: [Swift.String]?
  @objc public init(withPaymentIntentId paymentIntentIds: [Swift.String]? = nil, sendingChannels: [Swift.String]? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDRTPQRResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var responseDescription: Swift.String?
  @objc public var receiverName: Swift.String?
  @objc public var receiverAddress: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum Language : Swift.Int {
  case english
  case arabic
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDAuthenticationDetailsResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var acsEci: Swift.String?
  @objc public var paResStatus: Swift.String?
  @objc public var proofXml: Swift.String?
  @objc public var veResEnrolled: Swift.String?
  @objc public var authenticationToken: Swift.String?
  @objc public var xid: Swift.String?
  @objc public var accountAuthenticationValue: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDCancelResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var orderId: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc public var responseMessage: Swift.String?
  @objc public var detailedResponseMessage: Swift.String?
  @objc public var detailedResponseCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public struct SecureStoreErrorConstants {
}
public enum SecureStoreError : Swift.Error {
  case string2DataConversionError
  case data2StringConversionError
  case unhandledError(message: Swift.String)
}
extension GeideaPaymentSDK.SecureStoreError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public enum ConfigRouter {
  case getMerchantConfig(merchantKey: Swift.String)
}
public struct SDKErrorConstants {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class GDErrorResponse : ObjectiveC.NSObject {
  @objc public var errors: [Swift.String : [Swift.String]]
  @objc public var status: Swift.Int
  @objc public var title: Swift.String
  @objc public var traceId: Swift.String
  @objc public var type: Swift.String
  @objc public var responseCode: Swift.String
  @objc public var responseMessage: Swift.String
  @objc public var detailedResponseCode: Swift.String
  @objc public var detailedResponseMessage: Swift.String
  @objc public var responseDescription: Swift.String
  @objc public var orderId: Swift.String
  @objc deinit
}
@objc public class GDProductMConfig : ObjectiveC.NSObject, Swift.Codable {
  public var StoreId: Swift.String?
  public var MerchantId: Swift.String?
  public var IsTest: Swift.Bool
  @objc public init(withMerchantId merchantId: Swift.String? = nil, andStoreId storeId: Swift.String? = nil, isTest: Swift.Bool = true)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UITextField {
  @objc override dynamic open func awakeFromNib()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDMerchantDataResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var merchantDomain: Swift.String?
  @objc public var merchantLogoUrl: Swift.String?
  public var isTest: Swift.Bool?
  @objc public var applePaymentProcessingCertificateExpiryDateNew: Swift.String?
  @objc public var applePaymentProcessingCertificate: Swift.String?
  @objc public var merchantName: Swift.String?
  @objc public var isApplePayMobileEnabled: Swift.Bool
  @objc public var merchantNotificationEmail: Swift.String?
  @objc public var merchantGatewayKey: Swift.String?
  @objc public var cyberSourceSharedSecretKey: Swift.String?
  @objc public var gsdkMid: Swift.String?
  @objc public var applePaymentProcessingCertificateNew: Swift.String?
  @objc public var applePartnerInternalMerchantIdentifier: Swift.String?
  @objc public var cyberSourceMerchantId: Swift.String?
  @objc public var appleDeveloperId: Swift.String?
  @objc public var applePaymentProcessingCertificateExpiryDate: Swift.String?
  @objc public var cyberSourceApiIdentifier: Swift.String?
  @objc public var appleCertificatePrivateKey: Swift.String?
  @objc public var merchantCountry: Swift.String?
  @objc public var cyberSourceOrgUnitId: Swift.String?
  @objc public var mpgsMsoProvider: Swift.String?
  @objc public var gsdkSecretKey: Swift.String?
  @objc public var mpgsMerchantId: Swift.String?
  @objc public var customerNotificationFromEmail: Swift.String?
  @objc public var isTokenizationEnabled: Swift.Bool
  @objc public var defaultPaymentOperation: Swift.String?
  @objc public var allowedInitiatedByValues: [Swift.String]?
  @objc public var isApplePayWebEnabled: Swift.Bool
  @objc public var cardBrandProviders: [GeideaPaymentSDK.GDCardBrandProvider]?
  @objc public var isCallbackEnabled: Swift.Bool
  @objc public var customerPaymentNotification: Swift.Bool
  @objc public var isApplePayMobileCertificateAvailable: Swift.Bool
  @objc public var merchantNameAr: Swift.String?
  @objc public var appleCsr: Swift.String?
  @objc public var cyberSourceMerchantKeyId: Swift.String?
  @objc public var isPaymentMethodSelectionEnabled: Swift.Bool
  @objc public var apiPassword: Swift.String?
  @objc public var appleCertificatePrivateKeyNew: Swift.String?
  @objc public var currencies: [Swift.String]?
  @objc public var mpgsApiKey: Swift.String?
  @objc public var isTransactionReceiptEnabled: Swift.Bool
  @objc public var merchantWebsite: Swift.String?
  @objc public var gsdkTid: Swift.String?
  @objc public var isFederationToGsdkEnabled: Swift.Bool
  @objc public var cyberSourceApiKey: Swift.String?
  @objc public var callbackUrl: Swift.String?
  @objc public var isMeezaDigitalEnabled: Swift.Bool
  @objc public var useMpgsApiV60: Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public class GDQRDetails : ObjectiveC.NSObject, Swift.Codable {
  public var qrCustomerDetails: GeideaPaymentSDK.GDPICustomer?
  public var qrExpiryDate: Swift.String?
  @objc public init(withCustomerDetails qrCustomerDetails: GeideaPaymentSDK.GDPICustomer? = nil, expiryDate: Swift.String? = nil)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GDCardBrandProvider : ObjectiveC.NSObject, Swift.Codable {
  public var acquiringProvider: Swift.String?
  public var cardBrand: Swift.String?
  public var threeDSecureProvider: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension UIKit.UIFont {
  public static func GDRegisterFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class GDTerminalDetails : ObjectiveC.NSObject, Swift.Codable {
  @objc public var tid: Swift.String?
  @objc public var mid: Swift.String?
  @objc public var transactionNumber: Swift.String?
  @objc public var transactionCreateDateTime: Swift.String?
  @objc public var merchantReferenceId: Swift.String?
  @objc public var transactionType: Swift.String?
  @objc public var transactionOutcome: Swift.String?
  @objc public var providerGateId: Swift.String?
  @objc public var paymentWay: Swift.String?
  @objc public var reconciliationKey: Swift.String?
  @objc public var transactionReceiveDateTime: Swift.String?
  @objc public var transactionSentDateTime: Swift.String?
  @objc public var status: Swift.String?
  @objc public var message: Swift.String?
  @objc public var approvalCode: Swift.String?
  @objc public var responseCode: Swift.String?
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension GeideaPaymentSDK.PaymentType : Swift.Equatable {}
extension GeideaPaymentSDK.PaymentType : Swift.Hashable {}
extension GeideaPaymentSDK.PaymentType : Swift.RawRepresentable {}
extension GeideaPaymentSDK.Environment : Swift.Equatable {}
extension GeideaPaymentSDK.Environment : Swift.Hashable {}
extension GeideaPaymentSDK.Environment : Swift.RawRepresentable {}
extension GeideaPaymentSDK.CardType : Swift.Equatable {}
extension GeideaPaymentSDK.CardType : Swift.Hashable {}
extension GeideaPaymentSDK.CardType : Swift.RawRepresentable {}
extension GeideaPaymentSDK.LogLevel : Swift.Equatable {}
extension GeideaPaymentSDK.LogLevel : Swift.Hashable {}
extension GeideaPaymentSDK.LogLevel : Swift.RawRepresentable {}
extension GeideaPaymentSDK.PaymentOperation : Swift.Equatable {}
extension GeideaPaymentSDK.PaymentOperation : Swift.Hashable {}
extension GeideaPaymentSDK.PaymentOperation : Swift.RawRepresentable {}
extension GeideaPaymentSDK.Language : Swift.Equatable {}
extension GeideaPaymentSDK.Language : Swift.Hashable {}
extension GeideaPaymentSDK.Language : Swift.RawRepresentable {}
